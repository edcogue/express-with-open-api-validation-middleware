openapi: 3.0.3
info:
  title: Express CRUD API - User Management
  description: A well-organized Express.js API with TypeScript for managing users
  version: 1.0.0
  contact:
    name: API Support
    email: support@company.com
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      operationId: healthCheck
      tags:
        - Health
      responses:
        "200":
          description: Health check successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0
                required:
                  - status
                  - timestamp
                  - version

  /api/users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new user
      description: Create a new user with the provided information
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete user
      description: Delete a user by their ID
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        department:
          type: string
          description: Department where the user works
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
      required:
        - id
        - name
        - email
        - department
        - createdAt
        - updatedAt

    CreateUserDto:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
        department:
          type: string
          description: Department where the user works
          minLength: 1
          maxLength: 50
      required:
        - name
        - email
        - department

    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
        department:
          type: string
          description: Department where the user works
          minLength: 1
          maxLength: 50

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Name, email, and department are required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "User not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Internal server error"
